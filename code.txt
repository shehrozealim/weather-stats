import { useEffect, useState } from 'react'
import { LineChart } from '@mui/x-charts/LineChart'
import { Grid, Typography, Table, TableCell, TableContainer, TableHead, TableRow, TableBody, Avatar } from '@mui/material'

export function WeatherForecast() {
    let time = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']
    const weekday = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
    const [location, setLocation] = useState([])
    const [data, setData] = useState([])
    const [forecastData, setForecastData] = useState([])

    useEffect(() => {
        getLocation()
        fetchData()
        fetchWeekForecast()
    }, [])
    const getLocation = () => {
        document.getElementById('searchBar').addEventListener('keypress', (x) => {
            if (x.key === 'Enter') {
                setLocation(x.target.value.toLowerCase())
                fetchData(x.target.value.toLowerCase())
                fetchWeekForecast(x.target.value.toLowerCase())
            }
        })
    }
    const fetchData = async (location) => {

        if (!location) return;
        const result = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=96bc267963404f3e9c1180001240105&q=${location}&days=1&aqi=no&alerts=no`)
        if (result.status === 400) return
        result.json().then((res) => {
            let arr = [];
            const forecastData = res?.forecast.forecastday[0].hour
            for (let i = 0; i < 8; i++) {
                arr.push(forecastData[3 * i].temp_c)
            }
            setData(arr)
        }).catch((err) => {
            console.log(err)
        })

    }
    const fetchWeekForecast = async (location) => {
        const forecastDataArr = []
        if(!location) return;
        const result = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=96bc267963404f3e9c1180001240105&q=${location}&days=7&aqi=no&alerts=no`)
        result.json()
        .then((json) => {
            const forecastData = json.forecast.forecastday
            forecastData.map((res) => {
                forecastDataArr.push({
                    avgtemp: res.day.avgtemp_c,
                    date: res.date,
                    day: weekday[new Date(res.date).getDay()],
                    icon: res.day.condition.icon,
                    text: res.day.condition.text
                })
            })
            setForecastData(forecastDataArr)
        }).catch((err) => {
            console.log(err)
            setLocation([])
            setForecastData([])
            setData([])
        })
    }
    let max = data[0]

    for (let i = 0; i < data.length; i++) {
        if (data[i] < max) {
            max = data[i]
        }
    }
    if (location.length === 0) return;
    return (
        <div>
            <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>
                <Grid item xs={12} md={4}>
                    <Typography variant='h4' align='center'>
                        Todays weather:
                    </Typography>
                    <LineChart
                        xAxis={[{ data: time, scaleType: 'point' }]}
                        series={[
                            {
                                data: data,
                                area: true,
                                label: 'Temp in 째C'
                            },
                        ]}
                        height={300}
                        yAxis={[{ min: max - 2 }]}
                    />
                </Grid>
                <Grid item xs={8}>
                    <Typography variant='h4' align='center'>
                        Weekly Weather Forecast for {location.toUpperCase()}
                    </Typography>
                    <TableContainer component={Grid} paddingRight={2} >
                        <Table sx={{ minWidth: 650, padding: 0 }}>
                            <TableHead>
                                <TableRow>
                                    {forecastData.map((res) => (
                                        <TableCell align='center'>
                                            <Typography variant='h6'>
                                            {res.day} {new Date(res.date).getDate()}/{new Date(res.date).getMonth() + 1}
                                            </Typography>
                                        </TableCell>
                                    ))}
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {forecastData.map((res) => (
                                    <TableCell align='center'>
                                        <Typography fontSize={24}>
                                        {res.avgtemp} 째C
                                        </Typography>
                                    </TableCell>
                                ))}
                            </TableBody>
                            <TableBody>
                                {forecastData.map((res) => (
                                    <TableCell align='center'>
                                        <Typography variant='h6'>
                                        {res.text} <Avatar src={res.icon} sx={[{ margin: 'auto' }]}/>
                                        </Typography>
                                    </TableCell>
                                ))}
                            </TableBody>
                        </Table>
                    </TableContainer>
                </Grid>
            </Grid>
        </div>

    )
}



----------------------------------------------------------------------------------------
weatherForecast.jsx

-----------------------------------------------------------------------------------------
<Grid item container textAlign='center' alignItems='center' padding={0.5} columns={16} xs={8} md={2}>
                        <Card sx={{ margin: 'auto', width: '100%', borderRadius: '15px', borderColor: 'black', border: 1, height: '100%' }}>
                            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                                <CardContent sx={{ boxShadow: 0 }}>
                                    <Typography sx={{ typography: { xs: 'h4', md: 'h6' } }}>
                                        {res.day}
                                    </Typography>
                                    <Typography sx={{ typography: { xs: 'h5', md: 'body1' } }}>
                                        {new Date(res.date).getDate()}/{new Date(res.date).getMonth() + 1}
                                    </Typography>
                                </CardContent>
                                <CardMedia
                                    src={res.icon}
                                    component='img'
                                    sx={{ maxWidth: '60%', alignItems: 'center' }}
                                />
                                <CardContent>
                                    <Typography fontSize={30}>
                                        {res.avgtemp}째
                                    </Typography>
                                    <Typography fontSize={12}>
                                        24hr Avg.
                                    </Typography>
                                </CardContent>
                            </Box>
                        </Card>
                    </Grid>

------------------------------------------------------------
weatherData.jsx
------------------------------------------------------------
<Grid item alignItems="center">
          <Stack direction={{ xs: "column", sm: "row" }} spacing={{ xs: 1, sm: 5 }} divider={<Divider orientation="vertical" flexItem />} alignItems="center">
            <Stack direction='row' alignItems='center'>
              <DeviceThermostat sx={{ fontSize: 50 }} />
              <Stack alignItems='center' direction='column'>
                <Typography variant="h6">
                  Temp
                </Typography>
                <Typography variant="h5">
                  {weatherData.temp}째
                </Typography>
              </Stack>
            </Stack>
            <Stack direction='row' alignItems='center'>
              <Air sx={{ fontSize: 50 }} />
              <Stack alignItems='center' direction='column'>
                <Typography variant="h6" >
                  Wind Speed (kph)
                </Typography>
                <Typography variant="h5">
                  {weatherData.wind_speed}
                </Typography>
              </Stack>
            </Stack>
            <Stack direction='row' alignItems='center'>
              <Water sx={{ fontSize: 50 }} />
              <Stack alignItems='' direction='column' marginLeft={2}>
                <Typography variant="h6">
                  Humidity
                </Typography>
                <Typography variant="h5">
                  {weatherData.humidity}
                </Typography>
              </Stack>
            </Stack>
            <Stack direction='row' alignItems='center'>
              <Compress sx={{ fontSize: 50 }} />
              <Stack alignItems='center' direction='column'>
                <Typography variant="h6">
                  Pressure
                </Typography>
                <Typography variant="h5">
                  {weatherData.pressure}
                </Typography>
              </Stack>
            </Stack>
          </Stack>
        </Grid>